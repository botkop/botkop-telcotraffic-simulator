Telco Traffic Simulator
=======================

The application simulates imaginary mobile telco traffic.
It is built with Scala and Akka actors, so can be deployed distributed over as many nodes as you like.
It can publish to multiple brokers, including kafka, sockets, and simple logging.
The metrics generated by the celltowers are also configurable.

Vocabulary
----------
- 'traffic database' is an sqlite database residing in folder data/. It contains celltower and subscriber information. See below.
- 'mcc' is the mobile country code, see https://en.wikipedia.org/wiki/Mobile_country_code
- 'mnc' is the mobile network code, see https://en.wikipedia.org/wiki/Mobile_country_code
- 'subscriber' is a random record taken from the traffic database table 'identities'
- 'route' is a route calculated by Google, between 2 random points within the area defined by 'mcc' and 'mnc'
- 'velocity' is the speed at which the subscribers travel, in kilometers per hour
- 'trip' is a combination of a 'subscriber', a 'route', and a 'velocity'
- 'slide' is the size of the sliding publishing window, in milliseconds. That is: how often do you want the events published.
- 'speed factor': you can dynamically increase / decrease the velocity by this factor.
- 'broker': where to publish the events ? See conf/application.conf.

How does it work ?
------------------
Simulations are invoked by sending a simulation request to the service.
You can launch a simulation through REST or through the web interface.
By default the web interface is accessible at http://localhost:9000/simulator.
Example scripts for using the REST interface are available in the bin/ folder.

A simulation request consists of the following parameters:
- mcc
- mnc
- number of simultaneous trips
- slide size
- velocity
- speed factor

For each trip, a random subscriber and 2 random celltowers are picked from the database.
A request is sent to Google to calculate the route between the locations of the 2 celltowers.
The subscriber is then sent on its way along this route, at the speed defined by the velocity and the speed factor.

Every 'slide' milliseconds, the location and the details of the subscriber will be published to the 'subscriber-topic' of the configured broker.
At the same time, the celltower nearest to the subscriber is retrieved.
This celltower publishes its details along with a bearer id and metrics to the 'celltower-topic''.
The bearer id allows to link the subscriber to the celltower event.
The metrics are configurable in file conf/celltowers.conf.
Every metric template consists of a metric name, a mean and a standard deviation.
When a celltower event is published, a sample is taken from the gaussian distribution defined by these parameters.

Note that currently all events are published in JSON format.

Creation of traffic.db
----------------------
Before you can use the application, you need the traffic database.

To create the traffic.db data, you will need an installation of sqlite3 (see https://www.sqlite.org/ )
You will also need an API key from http://opencellid.org/
You also need wget (https://www.gnu.org/software/wget/) if you want to follow the instructions below

First, get the celltower database from opencellid.org, by executing:

bin/download_celltower_db.sh OPENCELLID_API_KEY

Note: if you have a free account with opencellid, you will only be able to do this once a day.

Now create the database, by executing:

bin/create_traffic_db.sh

Running the simulator
---------------------

You will need a Google API key from https://developers.google.com/maps/documentation/javascript/get-api-key.
Once you have they you must create a file conf/cred.conf and enter it in there:
google.api.key=YOUR_API_KEY

To start the application, execute
./activator run
in the root of the checked out code.




If you have ideas, please send them to
koen@fietsoverland.com

Thank you.

